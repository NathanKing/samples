/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import heatmap.ApplicationFrame;
import structs.HashMapItem;
import io.GFF3Parser;
import utils.IOUtils;
import io.MatrixParser;
import java.awt.Container;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Dialog form for creating and supplying input to a new
 * HeatMap interface.
 * @author nathan
 */
public class FileInputDialog extends javax.swing.JDialog{
    
    private File matrix, gff3, fasta;
    /**
     * Creates new form FileInputDialog
     */
    public FileInputDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        matrix = null;
        gff3 = null;
        fasta = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        titleLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        selectedMatrix = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        matrixTextField = new javax.swing.JTextField();
        selectMatrixFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        binSizeSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        selectedGFF3 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        gff3TextField = new javax.swing.JTextField();
        selectGFF3File = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fastaTextField = new javax.swing.JTextField();
        selectFastaFile = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        titleLabel.setText("Select data sources");

        generateButton.setText(" Generate map");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        selectedMatrix.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        selectedMatrix.setText("Matrix data");
        selectedMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedMatrixActionPerformed(evt);
            }
        });

        jLabel1.setText("Matrix File");

        selectMatrixFile.setText("...");
        selectMatrixFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMatrixFileActionPerformed(evt);
            }
        });

        jLabel2.setText("Bin Size");

        binSizeSpinner.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        binSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.1d, 10.0d, 0.5d));
        binSizeSpinner.setToolTipText("Sets the number of Bins / Mbp (0.5 -> 50.0)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(binSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(matrixTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectMatrixFile, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(selectedMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedMatrix)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(matrixTextField)
                    .addComponent(selectMatrixFile, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(binSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        selectedGFF3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        selectedGFF3.setText("GFF3 data");
        selectedGFF3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedGFF3ActionPerformed(evt);
            }
        });

        jLabel3.setText("GFF3 File");

        selectGFF3File.setText("...");
        selectGFF3File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGFF3FileActionPerformed(evt);
            }
        });

        jLabel4.setText("Fasta File(optional)");

        selectFastaFile.setText("...");
        selectFastaFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFastaFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedGFF3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(gff3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectGFF3File, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(fastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectFastaFile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedGFF3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gff3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectGFF3File, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFastaFile, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(titleLabel)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(generateButton)
                        .addGap(189, 189, 189))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(generateButton)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Listener method for the Generate button
     * @param evt the event generated when the Generate button is clicked
     */
    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        final ApplicationFrame parent = (ApplicationFrame)this.getParent();
        if(this.selectedMatrix.isSelected() || this.selectedGFF3.isSelected()){
            
            final String m, g, f;

            m = this.matrixTextField.getText();
            g = this.gff3TextField.getText();
            f = this.fastaTextField.getText();

            if(m.equals("") && !g.endsWith(".gff3") && !f.endsWith(".fasta")){
                JOptionPane.showMessageDialog(parent, "You must choose at least one matrix or GFF3 data file.", "File Error", JOptionPane.ERROR_MESSAGE);
            }

            //option 1
            else if(this.selectedMatrix.isSelected()){
                
                if(!m.isEmpty()){
                    final ApplicationFrame mainFrame = (ApplicationFrame)this.getParent();

                    final MatrixParser parser = new MatrixParser();

                    new Thread(){
                        @Override
                        public void run(){
                            try {

                                final ArrayList<HashMapItem> data = parser.parse(m);
                                mainFrame.createMatrixFrame(matrix, data, ((Double)binSizeSpinner.getValue()));

                            } catch (Exception ex) {
                                Logger.getLogger(FileInputDialog.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }.start();

                    this.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(parent, "You must provide a file with valid matrix data.", "File Error", JOptionPane.ERROR_MESSAGE);
                }
                
            }
            //option 2
            else if(this.selectedGFF3.isSelected()){

                if(!g.isEmpty()){
                    
                    final ApplicationFrame mainFrame = (ApplicationFrame)this.getParent();
                    final GFF3Parser parser = new GFF3Parser();
                    
                    new Thread(){
                        @Override
                        public void run(){
                            try {
                                boolean useSeqData = false;
                                if(!f.isEmpty()){
                                    useSeqData = true;
                                }

                                final ArrayList<HashMapItem> data = parser.parse(g, f, 0.05, 3, useSeqData, 5);
                                mainFrame.createChromosomeFrame(gff3, fasta, parser, data);

                            } catch (Exception ex) {
                                Logger.getLogger(FileInputDialog.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }.start();
                    this.dispose();
                }
                else{
                    
                }
            }
            
        }
        else{
            JOptionPane.showMessageDialog(parent, "Please select at least one of: Matrix, GFF3, or GFF3 + Sequence Data", "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    /**
     * Listener method for the selectedMatrix radio button
     * @param evt the source event
     */
    
    private void selectedMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedMatrixActionPerformed
        this.selectedGFF3.setSelected(false);
    }//GEN-LAST:event_selectedMatrixActionPerformed

    /**
     * Listener method for the selectedGFF3 radio button
     * @param evt the source event
     */
    
    private void selectedGFF3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedGFF3ActionPerformed
        this.selectedMatrix.setSelected(false);
    }//GEN-LAST:event_selectedGFF3ActionPerformed

    /**
     * Listener for the "Choose a matrix file" button
     * @param evt the source event
     */
    
    private void selectMatrixFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMatrixFileActionPerformed
        
        File result = IOUtils.matrixFileChooser();
        
        if(result != null){
            matrix = result;
        }
        if (matrix != null) {
            this.matrixTextField.setText(matrix.getAbsolutePath());
        }
    }//GEN-LAST:event_selectMatrixFileActionPerformed

    /**
     * Listener for the "Choose a gff3 file" button
     * @param evt the source event
     */
    
    private void selectGFF3FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGFF3FileActionPerformed
        
        File result = IOUtils.gff3FileChooser();
        
        if(result != null){
            gff3 = result;
        }
        if (gff3 != null) {
            this.gff3TextField.setText(gff3.getAbsolutePath());
        }
    }//GEN-LAST:event_selectGFF3FileActionPerformed

    /**
     * Listener for the "Choose a fasta file" button
     * @param evt the source event
     */
    
    private void selectFastaFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFastaFileActionPerformed
        File result = IOUtils.fastaFileChooser();
        
        if(result != null){
            fasta = result;
        }
        if (fasta != null) {
            this.fastaTextField.setText(fasta.getAbsolutePath());
        }
    }//GEN-LAST:event_selectFastaFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                FileInputDialog dialog = new FileInputDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JSpinner binSizeSpinner;
    private javax.swing.JTextField fastaTextField;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextField gff3TextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField matrixTextField;
    private javax.swing.JButton selectFastaFile;
    private javax.swing.JButton selectGFF3File;
    private javax.swing.JButton selectMatrixFile;
    private javax.swing.JRadioButton selectedGFF3;
    private javax.swing.JRadioButton selectedMatrix;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
